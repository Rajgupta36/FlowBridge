// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  zap   Zap[] //one to many relationship
}

model Zap {
  id      String   @unique @default(uuid())
  userId  Int?
  User    User?    @relation(fields: [userId], references: [id])
  trigger Trigger? //one to one
  actions Action[]
  zapRuns ZapRun[] //one to many
}

model Trigger {
  id                 String           @unique @default(uuid())
  zapId              String           @unique
  availableTriggerId String
  type               AvailableTrigger @relation(fields: [availableTriggerId], references: [id])
  zap                Zap              @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableTrigger {
  id      String    @id @default(uuid())
  name    String
  trigger Trigger[] // One-to-many relationship
}

model Action {
  id                String          @id @default(uuid())
  zapId             String
  availableActionId String
  type              AvailableAction @relation(fields: [availableActionId], references: [id])
  zap               Zap             @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  actions Action[] // One-to-many relationship
}

model ZapRun {
  id           String        @id @default(uuid())
  zapId        String
  zap          Zap           @relation(fields: [zapId], references: [id], onDelete: Cascade)
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id], onDelete: Cascade)
}
